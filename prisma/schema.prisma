// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  multiple_choice
  true_false
}

enum RoleName {
  admin
  player
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  name       String       @db.VarChar(255)
  provider   String?      @db.VarChar(255)
  providerId String?      @db.VarChar(255)
  password   String?      @db.VarChar(255)
  roleId     Int
  role       Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  Quizzes    Quizzes[]
  QuizScores QuizScores[]

  @@unique([provider, providerId])
}

model Role {
  id   Int      @id @default(autoincrement())
  name RoleName
  User User[]
}

model Quizzes {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String       @db.VarChar(255)
  description String       @db.Text()
  difficulty  String       @db.VarChar(255)
  createdAt   DateTime     @default(now())
  Question    Question[]
  QuizScores  QuizScores[]
}

model Question {
  id           Int          @id @default(autoincrement())
  quizId       Int
  quiz         Quizzes      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question     String       @db.Text()
  questionType QuestionType
  createdAt    DateTime     @default(now())
  Options      Options[]
}

model Options {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String   @db.Text()
  isCorrect  Boolean
  createdAt  DateTime @default(now())
}

model QuizScores {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    Int
  quiz      Quizzes  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score     Int
  createdAt DateTime @default(now())
}
